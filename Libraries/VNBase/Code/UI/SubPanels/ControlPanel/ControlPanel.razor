@using Sandbox.UI;
@using System;
@using System.Linq;

@namespace VNBase.UI
@inherits SubPanel

<root>
    <div class="buttons" @ref=ControlButtons>
        <button class="control-button" id="DialogueHistory">History</button>
        <button class="control-button" onclick="@ToggleUI">@(UIVisible ? "Hide UI" : "Show UI")</button>
    </div>

    <DialogueHistory class="hidden" Player="@Player" Settings="@Player.Settings" Hud="@this.Hud" />
</root>

@code {
    public Panel ControlButtons { get; set; }

    public bool UIVisible { get; private set; } = true;

    private bool IsInputPressed => Settings?.HideUIInputs.Any(x => x.Pressed) ?? false;

    public override void Tick()
    {
        if (IsInputPressed)
        {
            ToggleUI();
        }
    }

    public void ToggleUI()
    {
        // Panels that should not be hidden
        Type[] panelsToNotHide = new Type[]
        {
            typeof(CharacterPortraits)
        };

        var panelsToHide = Parent.ChildrenOfType<SubPanel>()
            .Skip(1)
            .Where(x => !panelsToNotHide.Contains(x.GetType()));

        foreach (var panel in panelsToHide)
        {
            panel.ToggleVisibility();
        }

        UIVisible = !UIVisible;
    }

    private SubPanel GetSubPanelFromId(string id)
    {
        return this.ChildrenOfType<SubPanel>().SingleOrDefault(x => x.ElementName == id.ToLower());
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        if (!firstTime) return;

        foreach (Button button in ControlButtons.ChildrenOfType<Button>())
        {
            if (button.Id != null)
            {
                SubPanel panel = GetSubPanelFromId(button.Id);

                button.AddEventListener("onclick", () =>
                {
                    panel.ToggleVisibility();
                });
            }
        }
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(UIVisible);
    }
}